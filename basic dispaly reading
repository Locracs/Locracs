#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>
#include "SparkFun_SCD30_Arduino_Library.h"

#define SCREEN_WIDTH 128  // Display-Breite
#define SCREEN_HEIGHT 64  // Display-Höhe
#define OLED_RESET    -1  // Reset-Pin (nicht verwendet)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

SCD30 airSensor;

// WLAN Access Point (AP) Konfiguration
const char *ssid = "CO2_Sensor";  // WLAN-Name
const char *password = "12345678";  // Passwort (min. 8 Zeichen)

// Webserver auf Port 80
ESP8266WebServer server(80);

// CO2-, Temperatur- und Luftfeuchtigkeitswerte
float co2 = 0;
float temp = 0;
float hum = 0;

void setup() {
    Serial.begin(115200);
    Wire.begin(4, 5);  // SDA=D2=GPIO4, SCL=D1=GPIO5

    // SCD30 starten
    if (airSensor.begin()) {
        Serial.println("SCD30 Sensor gefunden!");
    } else {
        Serial.println("SCD30 nicht gefunden. Überprüfe die Verkabelung.");
        while (1);
    }

    // OLED-Display starten
    if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {  // 0x3C ist die I2C-Adresse des OLED
        Serial.println("OLED nicht gefunden. Überprüfe die Verkabelung.");
        while (1);
    }
    display.clearDisplay();
    display.setTextSize(1);
    display.setTextColor(SSD1306_WHITE);
    display.setCursor(0, 0);
    display.println("SCD30 Start...");
    display.display();
    delay(2000);

    // Access Point starten
    WiFi.softAP(ssid, password);
    Serial.println("WLAN gestartet. Verbinde dich mit: " + String(ssid));

    // IP-Adresse des ESP8266 im AP-Modus ausgeben
    Serial.println("IP-Adresse: " + WiFi.softAPIP().toString());

    // Webserver-Endpunkt definieren
    server.on("/", []() {
        String html = "<html><head><script>";
        html += "function fetchData() {";
        html += "fetch('/data')";
        html += ".then(response => response.json())";
        html += ".then(data => {";
        html += "document.getElementById('co2').innerText = 'CO2: ' + data.co2 + ' ppm';";
        html += "document.getElementById('temp').innerText = 'Temp.: ' + data.temp + ' °C';";
        html += "document.getElementById('hum').innerText = 'Feuchte: ' + data.hum + ' %';";
        html += "})";
        html += ".catch(error => console.log('Fehler beim Abrufen der Daten:', error));";
        html += "}";
        html += "setInterval(fetchData, 2000);";
        html += "</script></head><body>";
        html += "<h1>CO2-Werte</h1>";
        html += "<p id='co2'>CO2: 0 ppm</p>";
        html += "<p id='temp'>Temp.: 0 °C</p>";
        html += "<p id='hum'>Feuchte: 0 %</p>";
        html += "</body></html>";
        server.send(200, "text/html", html);
    });

    // Endpunkt für JSON-Daten
    server.on("/data", HTTP_GET, []() {
        String json = "{";
        json += "\"co2\":" + String(co2) + ",";
        json += "\"temp\":" + String(temp, 2) + ",";
        json += "\"hum\":" + String(hum);
        json += "}";
        server.send(200, "application/json", json);
    });

    server.begin();  // Webserver starten
}

void loop() {
    if (airSensor.dataAvailable()) {
        co2 = airSensor.getCO2();
        temp = airSensor.getTemperature();
        hum = airSensor.getHumidity();

        // Wenn CO2, Temperatur oder Feuchtigkeit plausibel sind, dann Werte verwenden
        if (co2 > 0 && temp > -50 && temp < 100 && hum >= 0 && hum <= 100) {
            // Ausgabe auf Seriellen Monitor
            Serial.print("CO2: ");
            Serial.print(co2);
            Serial.print(" ppm, Temp: ");
            Serial.print(temp);
            Serial.print(" °C, Feuchte: ");
            Serial.print(hum);
            Serial.println(" %");

            // OLED-Display aktualisieren
            display.clearDisplay();
            display.setCursor(0, 11);
            display.print("CO2: "); display.print(co2); display.println(" ppm"); display.println(" ");
            display.print("Temp.: "); display.print(temp); display.println(" C"); display.println(" ");
            display.print("Luftf.: "); display.print(hum); display.println(" %");
            display.display();
        }
    }

    delay(2000);  // Warte 2 Sekunden pro Messung

    server.handleClient();  // Webserver-Clientanfragen bearbeiten
}